/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:49:32 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.CategoriaDAO;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.persistence.service.CategoriaService;
import br.com.marmitaria.persistence.service.GenericService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoriaService_ESTest extends CategoriaService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CategoriaService categoriaService0 = new CategoriaService();
      Categoria categoria0 = new Categoria((String) null);
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      doReturn(categoria0).when(categoriaDAO0).findByDescricao(anyString());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Categoria categoria1 = categoriaService0.findByDescricao("");
      assertSame(categoria1, categoria0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Categoria) null).when(categoriaDAO0).findByDescricao(anyString());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Categoria categoria0 = categoriaService0.findByDescricao("");
      assertNull(categoria0);
  }
}
