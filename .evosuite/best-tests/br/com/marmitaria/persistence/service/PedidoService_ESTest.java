/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 18:01:09 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.PedidoDAO;
import br.com.marmitaria.persistence.model.Cliente;
import br.com.marmitaria.persistence.model.Pedido;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.PedidoService;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PedidoService_ESTest extends PedidoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(pedidoDAO0).findAllByCliente(any(br.com.marmitaria.persistence.model.Cliente.class));
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Cliente cliente0 = new Cliente();
      List<Pedido> list0 = pedidoService0.findByCliente(cliente0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PedidoService pedidoService0 = new PedidoService();
      ArrayList<Pedido> arrayList0 = new ArrayList<Pedido>();
      Pedido pedido0 = new Pedido();
      arrayList0.add(pedido0);
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(pedidoDAO0).findAllByCliente(any(br.com.marmitaria.persistence.model.Cliente.class));
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Cliente cliente0 = new Cliente();
      List<Pedido> list0 = pedidoService0.findByCliente(cliente0);
      assertFalse(list0.isEmpty());
  }
}
