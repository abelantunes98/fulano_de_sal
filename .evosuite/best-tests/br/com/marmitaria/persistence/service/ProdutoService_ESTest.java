/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:57:04 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.ProdutoDAO;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.persistence.model.Produto;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.ProdutoService;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProdutoService_ESTest extends ProdutoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Produto) null).when(produtoDAO0).findByNome(anyString());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Produto produto0 = produtoService0.findByNome("N");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProdutoService produtoService0 = new ProdutoService();
      Vector<Produto> vector0 = new Vector<Produto>();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0, vector0, (List<Produto>) null).when(produtoDAO0).findByCategoria(any(br.com.marmitaria.persistence.model.Categoria.class));
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Categoria categoria0 = new Categoria("");
      produtoService0.findByCategoria(categoria0);
      produtoService0.findByCategoria(categoria0);
      produtoService0.findByCategoria(categoria0);
      List<Produto> list0 = produtoService0.findByCategoria(categoria0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProdutoService produtoService0 = new ProdutoService();
      Vector<Produto> vector0 = new Vector<Produto>();
      Produto produto0 = new Produto();
      vector0.add(produto0);
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(produtoDAO0).findByCategoria(any(br.com.marmitaria.persistence.model.Categoria.class));
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Categoria categoria0 = new Categoria("");
      List<Produto> list0 = produtoService0.findByCategoria(categoria0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProdutoService produtoService0 = new ProdutoService();
      Produto produto0 = new Produto();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(produtoDAO0).findByNome(anyString());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Produto produto1 = produtoService0.findByNome("~|wOn!QiW^w^kC");
      assertNull(produto1.getIdProduto());
  }
}
