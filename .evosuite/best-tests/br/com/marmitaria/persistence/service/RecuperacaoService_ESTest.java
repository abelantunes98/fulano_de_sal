/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:54:03 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.RecuperacaoDAO;
import br.com.marmitaria.persistence.model.Recuperacao;
import br.com.marmitaria.persistence.model.Usuario;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.RecuperacaoService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecuperacaoService_ESTest extends RecuperacaoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Recuperacao) null).when(recuperacaoDAO0).findByUsuario(any(br.com.marmitaria.persistence.model.Usuario.class));
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Usuario usuario0 = new Usuario();
      Recuperacao recuperacao0 = recuperacaoService0.findByUsuario(usuario0);
      assertNull(recuperacao0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      Recuperacao recuperacao0 = new Recuperacao();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(recuperacao0).when(recuperacaoDAO0).findByUsuario(any(br.com.marmitaria.persistence.model.Usuario.class));
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Usuario usuario0 = new Usuario();
      Recuperacao recuperacao1 = recuperacaoService0.findByUsuario(usuario0);
      assertSame(recuperacao1, recuperacao0);
  }
}
