/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:52:18 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.UsuarioDAO;
import br.com.marmitaria.persistence.model.Usuario;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.UsuarioService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsuarioService_ESTest extends UsuarioService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Usuario usuario0 = usuarioService0.findByEmail("h`");
      assertNull(usuario0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      Usuario usuario0 = new Usuario();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Usuario usuario1 = usuarioService0.findByEmail("h`");
      assertNull(usuario1.getId());
  }
}
