/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:43:46 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.AdministradorDAO;
import br.com.marmitaria.persistence.dao.UsuarioDAO;
import br.com.marmitaria.persistence.model.Administrador;
import br.com.marmitaria.persistence.service.AdministradorService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.UsuarioService;
import br.com.marmitaria.rest.controller.AdministradorController;
import br.com.marmitaria.rest.request.AdministradorRequest;
import br.com.marmitaria.rest.request.UsuarioRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdministradorController_ESTest extends AdministradorController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdministradorController administradorController0 = new AdministradorController();
      AdministradorService administradorService0 = new AdministradorService();
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "administradorService", (Object) administradorService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, String> jpaRepository1 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(administradorController0, (Class<?>) AdministradorController.class);
      UsuarioRequest usuarioRequest0 = new UsuarioRequest();
      // Undeclared exception!
      try { 
        administradorController0.create(usuarioRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Nome n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdministradorController administradorController0 = new AdministradorController();
      AdministradorService administradorService0 = new AdministradorService();
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "administradorService", (Object) administradorService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(administradorController0, (Class<?>) AdministradorController.class);
      AdministradorRequest administradorRequest0 = new AdministradorRequest();
      // Undeclared exception!
      try { 
        administradorController0.atualizaAdministrador(administradorRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Nome n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdministradorController administradorController0 = new AdministradorController();
      AdministradorService administradorService0 = new AdministradorService();
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "administradorService", (Object) administradorService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, String> jpaRepository1 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(administradorController0, (Class<?>) AdministradorController.class);
      // Undeclared exception!
      try { 
        administradorController0.atualizaAdministrador((AdministradorRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdministradorController administradorController0 = new AdministradorController();
      AdministradorService administradorService0 = new AdministradorService();
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      JpaRepository<Administrador, Object> jpaRepository0 = (JpaRepository<Administrador, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "administradorService", (Object) administradorService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, Administrador> jpaRepository1 = (JpaRepository<String, Administrador>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(administradorController0, (Class<?>) AdministradorController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(administradorController0, (Class<?>) AdministradorController.class);
      // Undeclared exception!
      try { 
        administradorController0.create((UsuarioRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }
}
