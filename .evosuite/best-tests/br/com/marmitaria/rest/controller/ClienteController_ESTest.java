/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:47:39 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.ClienteDAO;
import br.com.marmitaria.persistence.model.Cliente;
import br.com.marmitaria.persistence.service.ClienteService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.rest.controller.ClienteController;
import br.com.marmitaria.rest.request.ClienteRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClienteController_ESTest extends ClienteController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClienteController clienteController0 = new ClienteController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(clienteController0, (Class<?>) ClienteController.class, "clienteService", (Object) clienteService0);
      Injector.validateBean(clienteController0, (Class<?>) ClienteController.class);
      // Undeclared exception!
      try { 
        clienteController0.atualizaCliente((ClienteRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClienteController clienteController0 = new ClienteController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Cliente, String> jpaRepository0 = (JpaRepository<Cliente, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(clienteController0, (Class<?>) ClienteController.class, "clienteService", (Object) clienteService0);
      Injector.validateBean(clienteController0, (Class<?>) ClienteController.class);
      ClienteRequest clienteRequest0 = new ClienteRequest();
      // Undeclared exception!
      try { 
        clienteController0.atualizaCliente(clienteRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Nome n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }
}
