/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:53:53 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.marmitaria.persistence.dao.AdministradorDAO;
import br.com.marmitaria.persistence.model.Administrador;
import br.com.marmitaria.persistence.service.AdministradorService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.rest.request.UsuarioRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdministradorService_ESTest extends AdministradorService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdministradorService administradorService0 = new AdministradorService();
      UsuarioRequest usuarioRequest0 = new UsuarioRequest();
      Administrador administrador0 = new Administrador(usuarioRequest0);
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      doReturn(administrador0).when(administradorDAO0).findByEmail(anyString());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      administrador0.setCadastroPendente(true);
      JpaRepository<Administrador, Object> jpaRepository0 = (JpaRepository<Administrador, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Administrador administrador1 = administradorService0.findByEmail("");
      assertNull(administrador1.getNome());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdministradorService administradorService0 = new AdministradorService();
      AdministradorDAO administradorDAO0 = mock(AdministradorDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Administrador) null).when(administradorDAO0).findByEmail(anyString());
      Injector.inject(administradorService0, (Class<?>) AdministradorService.class, "dao", (Object) administradorDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(administradorService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(administradorService0, (Class<?>) AdministradorService.class);
      Administrador administrador0 = administradorService0.findByEmail(";)");
      assertNull(administrador0);
  }
}
