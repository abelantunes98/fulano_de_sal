/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:48:39 GMT 2019
 */

package br.com.marmitaria.persistence.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.service.GenericService;
import java.util.List;
import java.util.Optional;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericService_ESTest extends GenericService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      Optional<Object> optional0 = Optional.of((Object) stack0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      Object object0 = genericService0.salvar((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(jpaRepository0).findAll();
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      List<Object> list0 = genericService0.findAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericService<Integer> genericService0 = new GenericService<Integer>();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(jpaRepository0).findAll();
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      List<Integer> list0 = genericService0.findAll();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      JpaRepository<Object, Integer> jpaRepository0 = (JpaRepository<Object, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn("Content must not be null!").when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      Object object0 = genericService0.atualizar((Object) null);
      assertEquals("Content must not be null!", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericService<Integer> genericService0 = new GenericService<Integer>();
      Integer integer0 = new Integer((-806));
      // Undeclared exception!
      try { 
        genericService0.salvar(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository0).findById(any());
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      Long long0 = Long.getLong("#W& zSU");
      // Undeclared exception!
      try { 
        genericService0.findById(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericService<Integer> genericService0 = new GenericService<Integer>();
      // Undeclared exception!
      try { 
        genericService0.findAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericService<Integer> genericService0 = new GenericService<Integer>();
      Integer integer0 = new Integer(736);
      // Undeclared exception!
      try { 
        genericService0.atualizar(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      Optional<Object> optional0 = Optional.of((Object) stack0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any());
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      Long long0 = new Long((-1L));
      Object object0 = genericService0.findById(long0);
      assertEquals("[]", object0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericService<String> genericService0 = new GenericService<String>();
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository0).findById(anyString());
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      String string0 = genericService0.findById((Long) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericService<Object> genericService0 = new GenericService<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(jpaRepository0).findAll();
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      List<Object> list0 = genericService0.findAll();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericService<String> genericService0 = new GenericService<String>();
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      genericService0.deletar("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericService<Integer> genericService0 = new GenericService<Integer>();
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(genericService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(genericService0, (Class<?>) GenericService.class);
      genericService0.deleteAll();
  }
}
