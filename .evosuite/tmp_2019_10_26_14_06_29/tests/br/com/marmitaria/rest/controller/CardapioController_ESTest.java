/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:31:16 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.CategoriaDAO;
import br.com.marmitaria.persistence.dao.ProdutoDAO;
import br.com.marmitaria.persistence.model.Cardapio;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.persistence.model.Produto;
import br.com.marmitaria.persistence.service.CardapioService;
import br.com.marmitaria.persistence.service.CategoriaService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.ProdutoService;
import br.com.marmitaria.rest.controller.CardapioController;
import br.com.marmitaria.rest.reponse.CardapioRespose;
import br.com.marmitaria.rest.reponse.ProdutoResponse;
import br.com.marmitaria.rest.request.CardapioRequest;
import java.time.DayOfWeek;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CardapioController_ESTest extends CardapioController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Object> jpaRepository1 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository1).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<ProdutoResponse, Long> jpaRepository2 = (JpaRepository<ProdutoResponse, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      Long long0 = new Long(705L);
      // Undeclared exception!
      try { 
        cardapioController0.ultimoPorCategoria(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      Vector<CardapioRespose> vector0 = new Vector<CardapioRespose>();
      JpaRepository<CardapioRespose, Object> jpaRepository0 = (JpaRepository<CardapioRespose, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Cardapio cardapio0 = new Cardapio();
      Optional<Cardapio> optional0 = Optional.of(cardapio0);
      JpaRepository<Cardapio, Object> jpaRepository1 = (JpaRepository<Cardapio, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository1).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Integer, Object> jpaRepository2 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      Long long0 = new Long(770L);
      // Undeclared exception!
      try { 
        cardapioController0.ultimoPorCategoria(long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // br.com.marmitaria.persistence.model.Cardapio cannot be cast to br.com.marmitaria.persistence.model.Categoria
         //
         verifyException("br.com.marmitaria.rest.controller.CardapioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      // Undeclared exception!
      try { 
        cardapioController0.removeCardapio();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.controller.CardapioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      JpaRepository<String, DayOfWeek> jpaRepository0 = (JpaRepository<String, DayOfWeek>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<String, Cardapio> jpaRepository1 = (JpaRepository<String, Cardapio>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, Categoria> jpaRepository2 = (JpaRepository<Object, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      // Undeclared exception!
      try { 
        cardapioController0.cardapioDoDia();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.reponse.CardapioRespose", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      JpaRepository<Long, String> jpaRepository0 = (JpaRepository<Long, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Long>) null).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Optional<Long> optional0 = Optional.empty();
      JpaRepository<Long, Produto> jpaRepository1 = (JpaRepository<Long, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository1).findById(any(br.com.marmitaria.persistence.model.Produto.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Integer, String> jpaRepository2 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      Long long0 = new Long((-1332L));
      // Undeclared exception!
      try { 
        cardapioController0.ultimoPorCategoria(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Categoria n\u00E3o cadastrada!
         //
         verifyException("br.com.marmitaria.rest.controller.CardapioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("ysjzz[2Jpy)=X\"@k^x");
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, Integer> jpaRepository1 = (JpaRepository<Object, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, String> jpaRepository2 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      // Undeclared exception!
      try { 
        cardapioController0.cardapioDoDia();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.com.marmitaria.persistence.model.Cardapio
         //
         verifyException("br.com.marmitaria.rest.controller.CardapioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      Vector<Cardapio> vector0 = new Vector<Cardapio>();
      JpaRepository<Cardapio, CardapioRespose> jpaRepository0 = (JpaRepository<Cardapio, CardapioRespose>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Long, Long> jpaRepository1 = (JpaRepository<Long, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<String, CardapioRespose> jpaRepository2 = (JpaRepository<String, CardapioRespose>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      ResponseEntity<CardapioRespose> responseEntity0 = cardapioController0.cardapioDoDia();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      Vector<Cardapio> vector0 = new Vector<Cardapio>();
      JpaRepository<Cardapio, CardapioRespose> jpaRepository0 = (JpaRepository<Cardapio, CardapioRespose>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(jpaRepository0).findAll();
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Long, Long> jpaRepository1 = (JpaRepository<Long, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      Optional<String> optional0 = Optional.of("");
      JpaRepository<String, CardapioRespose> jpaRepository2 = (JpaRepository<String, CardapioRespose>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository2).findById(any(br.com.marmitaria.rest.reponse.CardapioRespose.class));
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      CardapioRequest cardapioRequest0 = new CardapioRequest();
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>(406);
      linkedHashSet0.add((Long) null);
      cardapioRequest0.setIdProdutos(linkedHashSet0);
      // Undeclared exception!
      try { 
        cardapioController0.cadastrar(cardapioRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.com.marmitaria.persistence.model.Produto
         //
         verifyException("br.com.marmitaria.rest.controller.CardapioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CardapioController cardapioController0 = new CardapioController();
      CardapioService cardapioService0 = new CardapioService();
      JpaRepository<Long, String> jpaRepository0 = (JpaRepository<Long, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(cardapioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(cardapioService0, (Class<?>) CardapioService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "cardapioService", (Object) cardapioService0);
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Long, Produto> jpaRepository1 = (JpaRepository<Long, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Integer, String> jpaRepository2 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(cardapioController0, (Class<?>) CardapioController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(cardapioController0, (Class<?>) CardapioController.class);
      cardapioController0.removeCardapio();
  }
}
