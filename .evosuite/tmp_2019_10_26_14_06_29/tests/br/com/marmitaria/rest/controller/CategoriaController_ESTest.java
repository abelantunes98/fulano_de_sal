/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:45:06 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.CategoriaDAO;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.persistence.service.CategoriaService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.rest.controller.CategoriaController;
import br.com.marmitaria.rest.request.CategoriaRequest;
import java.util.Optional;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoriaController_ESTest extends CategoriaController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Optional<Object> optional0 = Optional.ofNullable((Object) null);
      Categoria categoria0 = new Categoria("");
      JpaRepository<Object, Categoria> jpaRepository0 = (JpaRepository<Object, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any(br.com.marmitaria.persistence.model.Categoria.class));
      doReturn(categoria0).when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Categoria categoria1 = new Categoria("!8GF");
      Long long0 = new Long(0L);
      categoria1.setId(long0);
      ResponseEntity<Categoria> responseEntity0 = categoriaController0.atualizar(categoria1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, Integer> jpaRepository0 = (JpaRepository<Object, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository0).findById(anyInt());
      doReturn((Object) null).when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Categoria categoria0 = new Categoria("Location");
      Long long0 = new Long(1605L);
      categoria0.setId(long0);
      ResponseEntity<Categoria> responseEntity0 = categoriaController0.atualizar(categoria0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<Object>) null).when(jpaRepository0).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Long long0 = new Long((-294L));
      // Undeclared exception!
      try { 
        categoriaController0.remover(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Optional<Object> optional0 = Optional.ofNullable((Object) ";1}\"3x");
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        categoriaController0.remover(long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.com.marmitaria.persistence.model.Categoria
         //
         verifyException("br.com.marmitaria.rest.controller.CategoriaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      // Undeclared exception!
      try { 
        categoriaController0.cadastrar((CategoriaRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Optional<Object> optional0 = Optional.empty();
      Integer integer0 = new Integer(12);
      JpaRepository<Object, Categoria> jpaRepository0 = (JpaRepository<Object, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any(br.com.marmitaria.persistence.model.Categoria.class));
      doReturn(integer0).when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Categoria categoria0 = new Categoria("!8GF");
      Long long0 = new Long(0L);
      categoria0.setId(long0);
      // Undeclared exception!
      try { 
        categoriaController0.atualizar(categoria0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to br.com.marmitaria.persistence.model.Categoria
         //
         verifyException("br.com.marmitaria.rest.controller.CategoriaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<String, Integer> jpaRepository0 = (JpaRepository<String, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository0).findById(anyInt());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Long long0 = new Long((-1109L));
      // Undeclared exception!
      try { 
        categoriaController0.remover(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Categoria n\u00E3o encontrada!
         //
         verifyException("br.com.marmitaria.rest.controller.CategoriaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      Categoria categoria0 = new Categoria("Loop Detected");
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      doReturn(categoria0).when(categoriaDAO0).findByDescricao(anyString());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      CategoriaRequest categoriaRequest0 = new CategoriaRequest();
      categoriaRequest0.setDescricao("Loop Detected");
      // Undeclared exception!
      try { 
        categoriaController0.cadastrar(categoriaRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Categoria j\u00E1 existente.
         //
         verifyException("br.com.marmitaria.rest.controller.CategoriaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Categoria) null).when(categoriaDAO0).findByDescricao(anyString());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Vector<Object> vector0 = new Vector<Object>();
      JpaRepository<Object, Integer> jpaRepository0 = (JpaRepository<Object, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jpaRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      CategoriaRequest categoriaRequest0 = new CategoriaRequest();
      categoriaRequest0.setDescricao(" 3E<K(#[cA,&bu+:6");
      categoriaController0.cadastrar(categoriaRequest0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CategoriaController categoriaController0 = new CategoriaController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(categoriaController0, (Class<?>) CategoriaController.class, "service", (Object) categoriaService0);
      Injector.validateBean(categoriaController0, (Class<?>) CategoriaController.class);
      Categoria categoria0 = new Categoria();
      // Undeclared exception!
      try { 
        categoriaController0.atualizar(categoria0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Id n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }
}
