/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:34:45 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.ClienteDAO;
import br.com.marmitaria.persistence.dao.PedidoDAO;
import br.com.marmitaria.persistence.dao.ProdutoDAO;
import br.com.marmitaria.persistence.model.Marmita;
import br.com.marmitaria.persistence.model.Pedido;
import br.com.marmitaria.persistence.model.Produto;
import br.com.marmitaria.persistence.service.ClienteService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.MarmitaService;
import br.com.marmitaria.persistence.service.PedidoService;
import br.com.marmitaria.persistence.service.ProdutoService;
import br.com.marmitaria.rest.controller.PedidoController;
import br.com.marmitaria.rest.reponse.PedidoResponse;
import br.com.marmitaria.rest.reponse.PedidosResponse;
import br.com.marmitaria.rest.request.PedidoRequest;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PedidoController_ESTest extends PedidoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, PedidosResponse> jpaRepository0 = (JpaRepository<String, PedidosResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<PedidosResponse, Integer> jpaRepository1 = (JpaRepository<PedidosResponse, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Object, Marmita> jpaRepository2 = (JpaRepository<Object, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Long, Long> jpaRepository3 = (JpaRepository<Long, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.listar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Pedido> jpaRepository0 = (JpaRepository<Object, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Pedido, String> jpaRepository2 = (JpaRepository<Pedido, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<PedidosResponse, Marmita> jpaRepository3 = (JpaRepository<PedidosResponse, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.listarPorCliente((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Produto, Integer> jpaRepository0 = (JpaRepository<Produto, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<Produto, Produto> jpaRepository1 = (JpaRepository<Produto, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1);
      vector0.add(integer0);
      JpaRepository<Integer, Object> jpaRepository2 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Marmita, Pedido> jpaRepository3 = (JpaRepository<Marmita, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.listar();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to br.com.marmitaria.persistence.model.Pedido
         //
         verifyException("br.com.marmitaria.rest.reponse.PedidosResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Pedido> jpaRepository0 = (JpaRepository<Object, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<PedidoResponse, String> jpaRepository1 = (JpaRepository<PedidoResponse, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      Long long0 = new Long((-752L));
      Optional.of((Object) long0);
      JpaRepository<Object, Object> jpaRepository2 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository2).findById(any());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, Sort.Direction> jpaRepository3 = (JpaRepository<Object, Sort.Direction>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.confirmar(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Marmita, Long> jpaRepository0 = (JpaRepository<Marmita, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<Produto, Marmita> jpaRepository1 = (JpaRepository<Produto, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Integer, Integer> jpaRepository2 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<PedidoResponse, PedidoResponse> jpaRepository3 = (JpaRepository<PedidoResponse, PedidoResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      PedidoRequest pedidoRequest0 = new PedidoRequest();
      // Undeclared exception!
      try { 
        pedidoController0.cadastrar(pedidoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<PedidoResponse, String> jpaRepository1 = (JpaRepository<PedidoResponse, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("d&{,R38Ow{|d");
      JpaRepository<String, Long> jpaRepository2 = (JpaRepository<String, Long>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Marmita, Object> jpaRepository3 = (JpaRepository<Marmita, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.apagarPedidos();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.com.marmitaria.persistence.model.Pedido
         //
         verifyException("br.com.marmitaria.rest.controller.PedidoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Pedido> jpaRepository0 = (JpaRepository<Object, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      LinkedList<Pedido> linkedList0 = new LinkedList<Pedido>();
      Pedido pedido0 = new Pedido();
      Boolean boolean0 = Boolean.TRUE;
      pedido0.setConfirmado(boolean0);
      linkedList0.offerLast(pedido0);
      JpaRepository<Pedido, String> jpaRepository2 = (JpaRepository<Pedido, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<PedidosResponse, Marmita> jpaRepository3 = (JpaRepository<PedidosResponse, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      ResponseEntity<Pedido> responseEntity0 = pedidoController0.apagarPedidos();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Pedido> jpaRepository0 = (JpaRepository<Object, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      LinkedList<Pedido> linkedList0 = new LinkedList<Pedido>();
      Pedido pedido0 = new Pedido();
      Boolean boolean0 = Boolean.FALSE;
      linkedList0.add(pedido0);
      pedido0.setConfirmado(boolean0);
      JpaRepository<Pedido, String> jpaRepository2 = (JpaRepository<Pedido, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<PedidosResponse, Marmita> jpaRepository3 = (JpaRepository<PedidosResponse, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      ResponseEntity<Pedido> responseEntity0 = pedidoController0.apagarPedidos();
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Pedido> jpaRepository0 = (JpaRepository<Object, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      LinkedList<Pedido> linkedList0 = new LinkedList<Pedido>();
      Pedido pedido0 = new Pedido();
      linkedList0.offerLast(pedido0);
      JpaRepository<Pedido, String> jpaRepository2 = (JpaRepository<Pedido, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(jpaRepository2).findAll();
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<PedidosResponse, Marmita> jpaRepository3 = (JpaRepository<PedidosResponse, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.apagarPedidos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.controller.PedidoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<PedidoResponse, Object> jpaRepository0 = (JpaRepository<PedidoResponse, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<Long, Integer> jpaRepository1 = (JpaRepository<Long, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<Pedido, PedidoResponse> jpaRepository2 = (JpaRepository<Pedido, PedidoResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository2).findById(any(br.com.marmitaria.rest.reponse.PedidoResponse.class));
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Marmita, Object> jpaRepository3 = (JpaRepository<Marmita, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        pedidoController0.confirmar(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pedido n\u00E3o cadastrado!
         //
         verifyException("br.com.marmitaria.rest.controller.PedidoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, Pedido> jpaRepository0 = (JpaRepository<Integer, Pedido>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<Produto, String> jpaRepository1 = (JpaRepository<Produto, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      Pedido pedido0 = new Pedido();
      Optional.ofNullable(pedido0);
      JpaRepository<Pedido, Object> jpaRepository2 = (JpaRepository<Pedido, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository2).findById(any());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Pedido, Marmita> jpaRepository3 = (JpaRepository<Pedido, Marmita>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        pedidoController0.confirmar(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PedidoController pedidoController0 = new PedidoController();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Pedido, Produto> jpaRepository0 = (JpaRepository<Pedido, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "clienteService", (Object) clienteService0);
      MarmitaService marmitaService0 = new MarmitaService();
      JpaRepository<Pedido, Produto> jpaRepository1 = (JpaRepository<Pedido, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(marmitaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(marmitaService0, (Class<?>) MarmitaService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "marmitaService", (Object) marmitaService0);
      PedidoService pedidoService0 = new PedidoService();
      PedidoDAO pedidoDAO0 = mock(PedidoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) PedidoService.class, "dao", (Object) pedidoDAO0);
      JpaRepository<String, Integer> jpaRepository2 = (JpaRepository<String, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(pedidoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(pedidoService0, (Class<?>) PedidoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "pedidoService", (Object) pedidoService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, Integer> jpaRepository3 = (JpaRepository<Object, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository3);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(pedidoController0, (Class<?>) PedidoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(pedidoController0, (Class<?>) PedidoController.class);
      // Undeclared exception!
      try { 
        pedidoController0.confirmar((Long) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pedido n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.controller.PedidoController", e);
      }
  }
}
