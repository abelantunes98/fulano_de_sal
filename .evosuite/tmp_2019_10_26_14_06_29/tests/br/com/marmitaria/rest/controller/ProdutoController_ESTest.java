/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:37:00 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.CategoriaDAO;
import br.com.marmitaria.persistence.dao.ProdutoDAO;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.persistence.model.Produto;
import br.com.marmitaria.persistence.service.CategoriaService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.ProdutoService;
import br.com.marmitaria.rest.controller.ProdutoController;
import br.com.marmitaria.rest.request.ProdutoRequest;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProdutoController_ESTest extends ProdutoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Categoria, Integer> jpaRepository0 = (JpaRepository<Categoria, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Integer, Object> jpaRepository1 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(jpaRepository1).findAll();
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.lista();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Produto, Categoria> jpaRepository0 = (JpaRepository<Produto, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, String> jpaRepository1 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Long long0 = new Long((-1863L));
      // Undeclared exception!
      try { 
        produtoController0.remover(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.controller.ProdutoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<String, Produto> jpaRepository0 = (JpaRepository<String, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      Optional<String> optional0 = Optional.ofNullable("");
      JpaRepository<String, Object> jpaRepository1 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository1).findById(any());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      Long long0 = Long.getLong("PAYMENT_REQUIRED", 0L);
      // Undeclared exception!
      try { 
        produtoController0.remover(long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.com.marmitaria.persistence.model.Produto
         //
         verifyException("br.com.marmitaria.rest.controller.ProdutoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<Object>) null).when(jpaRepository0).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Categoria, Object> jpaRepository1 = (JpaRepository<Categoria, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        produtoController0.listaPorCategoria(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Integer integer0 = new Integer(0);
      Optional<Object> optional0 = Optional.of((Object) integer0);
      JpaRepository<Object, Produto> jpaRepository0 = (JpaRepository<Object, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any(br.com.marmitaria.persistence.model.Produto.class));
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<String, Categoria> jpaRepository1 = (JpaRepository<String, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.listaPorCategoria((Long) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to br.com.marmitaria.persistence.model.Categoria
         //
         verifyException("br.com.marmitaria.rest.controller.ProdutoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Produto produto0 = new Produto();
      linkedList0.addLast(produto0);
      Object object0 = new Object();
      linkedList0.add(object0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(jpaRepository0).findAll();
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      List<Categoria> list0 = categoriaService0.findAll();
      JpaRepository<Categoria, String> jpaRepository1 = (JpaRepository<Categoria, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(jpaRepository1).findAll();
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.lista();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, String> jpaRepository0 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, Categoria> jpaRepository1 = (JpaRepository<Object, Categoria>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      ProdutoRequest produtoRequest0 = new ProdutoRequest();
      // Undeclared exception!
      try { 
        produtoController0.cadastra(produtoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Categoria n\u00E3o informada!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<String, String> jpaRepository1 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.cadastra((ProdutoRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Object, Produto> jpaRepository1 = (JpaRepository<Object, Produto>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.atualizar((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      Long long0 = new Long(0L);
      Produto produto0 = mock(Produto.class, new ViolatedAssumptionAnswer());
      doReturn(long0, (Long) null).when(produto0).getIdProduto();
      doReturn("Failed to complete: ").when(produto0).getNome();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(produtoDAO0).findByNome(anyString());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Produto, Object> jpaRepository1 = (JpaRepository<Produto, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository1).findById(any());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      Produto produto1 = produtoService0.findByNome("O^ZtDB");
      // Undeclared exception!
      try { 
        produtoController0.atualizar(produto1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.persistence.service.GenericService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Integer integer0 = new Integer(415);
      Optional<Integer> optional0 = Optional.of(integer0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(anyInt());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      Long long0 = new Long(415);
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Produto, Object> jpaRepository1 = (JpaRepository<Produto, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      // Undeclared exception!
      try { 
        produtoController0.listaPorCategoria(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Categoria n\u00E3o encontrada!
         //
         verifyException("br.com.marmitaria.rest.controller.ProdutoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      Categoria categoria0 = new Categoria();
      Optional<Object> optional0 = Optional.ofNullable((Object) categoria0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository0).findById(any());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(produtoDAO0).findByCategoria(any(br.com.marmitaria.persistence.model.Categoria.class));
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      JpaRepository<Categoria, Object> jpaRepository1 = (JpaRepository<Categoria, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        produtoController0.listaPorCategoria(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Object, Object> jpaRepository0 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      Optional<Categoria> optional0 = Optional.empty();
      JpaRepository<Categoria, Object> jpaRepository1 = (JpaRepository<Categoria, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository1).findById(any());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        produtoController0.remover(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Produto n\u00E3o cadastrado!
         //
         verifyException("br.com.marmitaria.rest.controller.ProdutoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProdutoController produtoController0 = new ProdutoController();
      CategoriaService categoriaService0 = new CategoriaService();
      CategoriaDAO categoriaDAO0 = mock(CategoriaDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) CategoriaService.class, "dao", (Object) categoriaDAO0);
      JpaRepository<Integer, Integer> jpaRepository0 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(categoriaService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(categoriaService0, (Class<?>) CategoriaService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "categoriaService", (Object) categoriaService0);
      ProdutoService produtoService0 = new ProdutoService();
      Long long0 = new Long(415);
      ProdutoDAO produtoDAO0 = mock(ProdutoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(produtoService0, (Class<?>) ProdutoService.class, "dao", (Object) produtoDAO0);
      Produto produto0 = new Produto();
      Optional<Produto> optional0 = Optional.ofNullable(produto0);
      JpaRepository<Produto, Object> jpaRepository1 = (JpaRepository<Produto, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(jpaRepository1).findById(any());
      Injector.inject(produtoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(produtoService0, (Class<?>) ProdutoService.class);
      Injector.inject(produtoController0, (Class<?>) ProdutoController.class, "produtoService", (Object) produtoService0);
      Injector.validateBean(produtoController0, (Class<?>) ProdutoController.class);
      ResponseEntity<Produto> responseEntity0 = produtoController0.remover(long0);
      assertFalse(responseEntity0.hasBody());
  }
}
