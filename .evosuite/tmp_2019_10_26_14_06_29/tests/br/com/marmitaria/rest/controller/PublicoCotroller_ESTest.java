/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:26:16 GMT 2019
 */

package br.com.marmitaria.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.dao.ClienteDAO;
import br.com.marmitaria.persistence.dao.RecuperacaoDAO;
import br.com.marmitaria.persistence.dao.UsuarioDAO;
import br.com.marmitaria.persistence.model.Cliente;
import br.com.marmitaria.persistence.model.Recuperacao;
import br.com.marmitaria.persistence.model.Usuario;
import br.com.marmitaria.persistence.service.ClienteService;
import br.com.marmitaria.persistence.service.GenericService;
import br.com.marmitaria.persistence.service.RecuperacaoService;
import br.com.marmitaria.persistence.service.UsuarioService;
import br.com.marmitaria.rest.controller.PublicoCotroller;
import br.com.marmitaria.rest.reponse.UsuarioResponse;
import br.com.marmitaria.rest.request.ClienteRequest;
import br.com.marmitaria.rest.request.ConfirmacaoDeCodigoRequest;
import br.com.marmitaria.rest.request.LoginRequest;
import br.com.marmitaria.rest.request.RecuperacaoRequest;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.geo.Metrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PublicoCotroller_ESTest extends PublicoCotroller_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Boolean, Object> jpaRepository0 = (JpaRepository<Boolean, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, Object> jpaRepository1 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Usuario, String> jpaRepository2 = (JpaRepository<Usuario, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(jpaRepository2).findAll();
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.usuariosCadastrados();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Boolean> jpaRepository0 = (JpaRepository<Object, Boolean>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Integer, UsuarioResponse> jpaRepository1 = (JpaRepository<Integer, UsuarioResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) clienteService0);
      linkedList0.add((Object) "");
      JpaRepository<Object, Boolean> jpaRepository2 = (JpaRepository<Object, Boolean>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(jpaRepository2).findAll();
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.usuariosCadastrados();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Boolean, Cliente> jpaRepository1 = (JpaRepository<Boolean, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, Object> jpaRepository2 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.solicitarRecuperacao("*B,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email inv\u00E1lido!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, Integer> jpaRepository0 = (JpaRepository<String, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Usuario, Object> jpaRepository1 = (JpaRepository<Usuario, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, Object> jpaRepository2 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      RecuperacaoRequest recuperacaoRequest0 = new RecuperacaoRequest();
      // Undeclared exception!
      try { 
        publicoCotroller0.recuperarSenha(recuperacaoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Usuario, Object> jpaRepository0 = (JpaRepository<Usuario, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Usuario, Integer> jpaRepository1 = (JpaRepository<Usuario, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, Usuario> jpaRepository2 = (JpaRepository<Integer, Usuario>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.recuperarSenha((RecuperacaoRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Integer, UsuarioResponse> jpaRepository1 = (JpaRepository<Integer, UsuarioResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, Cliente> jpaRepository2 = (JpaRepository<String, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      LoginRequest loginRequest0 = new LoginRequest();
      // Undeclared exception!
      try { 
        publicoCotroller0.login(loginRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Usuario, String> jpaRepository0 = (JpaRepository<Usuario, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, Object> jpaRepository1 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, Integer> jpaRepository2 = (JpaRepository<Integer, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.login((LoginRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, Object> jpaRepository0 = (JpaRepository<String, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Integer, String> jpaRepository1 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Object, String> jpaRepository2 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ClienteRequest clienteRequest0 = new ClienteRequest();
      // Undeclared exception!
      try { 
        publicoCotroller0.create(clienteRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Nome n\u00E3o informado!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, Object> jpaRepository0 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<String, Integer> jpaRepository1 = (JpaRepository<String, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, Usuario> jpaRepository2 = (JpaRepository<String, Usuario>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.create((ClienteRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, Usuario> jpaRepository0 = (JpaRepository<Integer, Usuario>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<UsuarioResponse, UsuarioResponse> jpaRepository1 = (JpaRepository<UsuarioResponse, UsuarioResponse>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Object, Usuario> jpaRepository2 = (JpaRepository<Object, Usuario>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmaCodigoRecuperacao((ConfirmacaoDeCodigoRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<UsuarioResponse, Metrics> jpaRepository0 = (JpaRepository<UsuarioResponse, Metrics>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Usuario, Boolean> jpaRepository1 = (JpaRepository<Usuario, Boolean>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Cliente, String> jpaRepository2 = (JpaRepository<Cliente, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      RecuperacaoRequest recuperacaoRequest0 = new RecuperacaoRequest();
      recuperacaoRequest0.setSenha("uI@jpP");
      recuperacaoRequest0.setEmail("] does not exist in enum type ");
      // Undeclared exception!
      try { 
        publicoCotroller0.recuperarSenha(recuperacaoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // O usu\u00E1rio n\u00E3o se encontra na base de dados do sistema.
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Recuperacao) null).when(recuperacaoDAO0).findByUsuario(any(br.com.marmitaria.persistence.model.Usuario.class));
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, Cliente> jpaRepository1 = (JpaRepository<Object, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Cliente cliente0 = new Cliente();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(cliente0).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Object, Object> jpaRepository2 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ConfirmacaoDeCodigoRequest confirmacaoDeCodigoRequest0 = new ConfirmacaoDeCodigoRequest();
      confirmacaoDeCodigoRequest0.setCodigo("lowerBound is marked @NonNull but is null");
      confirmacaoDeCodigoRequest0.setEmail("lowerBound is marked @NonNull but is null");
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmaCodigoRecuperacao(confirmacaoDeCodigoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // N\u00E3o existe registros de pedidos de recupera\u00E7\u00E3o de senha.
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, Cliente> jpaRepository1 = (JpaRepository<Object, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Object, Object> jpaRepository2 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ConfirmacaoDeCodigoRequest confirmacaoDeCodigoRequest0 = new ConfirmacaoDeCodigoRequest();
      confirmacaoDeCodigoRequest0.setCodigo("lowerBound is marked @NonNull but is null");
      confirmacaoDeCodigoRequest0.setEmail("lowerBound is marked @NonNull but is null");
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmaCodigoRecuperacao(confirmacaoDeCodigoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // O usu\u00E1rio n\u00E3o se encontra na base de dados do sistema.
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<String, String> jpaRepository0 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      Recuperacao recuperacao0 = mock(Recuperacao.class, new ViolatedAssumptionAnswer());
      doReturn("GenericPropZrtyMatcher must nNt be empty!").when(recuperacao0).getCodigo();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      doReturn(recuperacao0).when(recuperacaoDAO0).findByUsuario(any(br.com.marmitaria.persistence.model.Usuario.class));
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, Cliente> jpaRepository1 = (JpaRepository<Object, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Cliente cliente0 = new Cliente();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(cliente0).when(usuarioDAO0).findByEmail(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Object, Object> jpaRepository2 = (JpaRepository<Object, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ConfirmacaoDeCodigoRequest confirmacaoDeCodigoRequest0 = new ConfirmacaoDeCodigoRequest();
      confirmacaoDeCodigoRequest0.setCodigo("lowerBound issmarded cNonwull but is null");
      confirmacaoDeCodigoRequest0.setEmail("lowerBound issmarded cNonwull but is null");
      ResponseEntity<Boolean> responseEntity0 = publicoCotroller0.confirmaCodigoRecuperacao(confirmacaoDeCodigoRequest0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Object, Cliente> jpaRepository0 = (JpaRepository<Object, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Usuario, String> jpaRepository1 = (JpaRepository<Usuario, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Metrics, Integer> jpaRepository2 = (JpaRepository<Metrics, Integer>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ConfirmacaoDeCodigoRequest confirmacaoDeCodigoRequest0 = new ConfirmacaoDeCodigoRequest();
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmaCodigoRecuperacao(confirmacaoDeCodigoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email n\u00E3o informado
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, SQLException> jpaRepository0 = (JpaRepository<Integer, SQLException>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Object, String> jpaRepository1 = (JpaRepository<Object, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<String, String> jpaRepository2 = (JpaRepository<String, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      ConfirmacaoDeCodigoRequest confirmacaoDeCodigoRequest0 = new ConfirmacaoDeCodigoRequest();
      confirmacaoDeCodigoRequest0.setEmail("8[_&k-0UTeubQ|");
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmaCodigoRecuperacao(confirmacaoDeCodigoRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Codigo n\u00E3o informado
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<Integer, String> jpaRepository0 = (JpaRepository<Integer, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(jpaRepository0).findById(anyString());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Boolean, Cliente> jpaRepository1 = (JpaRepository<Boolean, Cliente>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Integer, Object> jpaRepository2 = (JpaRepository<Integer, Object>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.confirmarCadastro((Long) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // O usu\u00E1rio n\u00E3o se encontra na base de dados do sistema.
         //
         verifyException("br.com.marmitaria.rest.controller.PublicoCotroller", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PublicoCotroller publicoCotroller0 = new PublicoCotroller();
      ClienteService clienteService0 = new ClienteService();
      ClienteDAO clienteDAO0 = mock(ClienteDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) ClienteService.class, "dao", (Object) clienteDAO0);
      JpaRepository<UsuarioResponse, Metrics> jpaRepository0 = (JpaRepository<UsuarioResponse, Metrics>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(clienteService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository0);
      Injector.validateBean(clienteService0, (Class<?>) ClienteService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "clienteService", (Object) clienteService0);
      RecuperacaoService recuperacaoService0 = new RecuperacaoService();
      RecuperacaoDAO recuperacaoDAO0 = mock(RecuperacaoDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) RecuperacaoService.class, "dao", (Object) recuperacaoDAO0);
      JpaRepository<Usuario, Boolean> jpaRepository1 = (JpaRepository<Usuario, Boolean>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(recuperacaoService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository1);
      Injector.validateBean(recuperacaoService0, (Class<?>) RecuperacaoService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "recuperacaoService", (Object) recuperacaoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      UsuarioDAO usuarioDAO0 = mock(UsuarioDAO.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "dao", (Object) usuarioDAO0);
      JpaRepository<Cliente, String> jpaRepository2 = (JpaRepository<Cliente, String>) mock(JpaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) GenericService.class, "dao", (Object) jpaRepository2);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(publicoCotroller0, (Class<?>) PublicoCotroller.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(publicoCotroller0, (Class<?>) PublicoCotroller.class);
      // Undeclared exception!
      try { 
        publicoCotroller0.reenviarEmailRecuperacao("lowerBound is marked cNonwull but is null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Email inv\u00E1lido!
         //
         verifyException("br.com.marmitaria.rest.util.Validation", e);
      }
  }
}
