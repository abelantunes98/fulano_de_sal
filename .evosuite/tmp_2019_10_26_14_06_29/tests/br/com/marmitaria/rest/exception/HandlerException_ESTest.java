/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:54:53 GMT 2019
 */

package br.com.marmitaria.rest.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.rest.exception.CustomError;
import br.com.marmitaria.rest.exception.DadosInvalidosException;
import br.com.marmitaria.rest.exception.HandlerException;
import br.com.marmitaria.rest.exception.TokenException;
import br.com.marmitaria.rest.exception.notFound.NotFoundException;
import br.com.marmitaria.rest.exception.usuario.UsuarioInvalidoException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HandlerException_ESTest extends HandlerException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      UsuarioInvalidoException usuarioInvalidoException0 = new UsuarioInvalidoException("org.springframework.web.context.request.ServletRequestAttributes.DESTRUCTION_CALLBACK.");
      ResponseEntity<CustomError> responseEntity0 = handlerException0.usuarioInvalido(usuarioInvalidoException0, servletWebRequest0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      TokenException tokenException0 = new TokenException("G\u0002<M");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        handlerException0.tokenInvalido(tokenException0, servletWebRequest0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        handlerException0.tokenInvalido((TokenException) null, servletWebRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.exception.HandlerException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        handlerException0.notFound((NotFoundException) null, servletWebRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.exception.HandlerException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0);
      DadosInvalidosException dadosInvalidosException0 = new DadosInvalidosException("");
      // Undeclared exception!
      try { 
        handlerException0.dadosInvalidos(dadosInvalidosException0, servletWebRequest0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      DadosInvalidosException dadosInvalidosException0 = new DadosInvalidosException("(");
      // Undeclared exception!
      try { 
        handlerException0.dadosInvalidos(dadosInvalidosException0, (WebRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.exception.HandlerException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      DadosInvalidosException dadosInvalidosException0 = new DadosInvalidosException("G\u0002z^");
      ResponseEntity<CustomError> responseEntity0 = handlerException0.dadosInvalidos(dadosInvalidosException0, servletWebRequest0);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      TokenException tokenException0 = new TokenException("G\u0002z^");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      ResponseEntity<CustomError> responseEntity0 = handlerException0.tokenInvalido(tokenException0, servletWebRequest0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletWebRequest servletWebRequest0 = new ServletWebRequest(httpServletRequestWrapper0, httpServletResponseWrapper0);
      NotFoundException notFoundException0 = new NotFoundException("G\u0002z^");
      ResponseEntity<CustomError> responseEntity0 = handlerException0.notFound(notFoundException0, servletWebRequest0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HandlerException handlerException0 = new HandlerException();
      UsuarioInvalidoException usuarioInvalidoException0 = new UsuarioInvalidoException("}ZP&K");
      // Undeclared exception!
      try { 
        handlerException0.usuarioInvalido(usuarioInvalidoException0, (WebRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.exception.HandlerException", e);
      }
  }
}
