/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Oct 26 17:54:53 GMT 2019
 */

package br.com.marmitaria.rest.exception;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class HandlerException_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "br.com.marmitaria.rest.exception.HandlerException"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/rickecr/Documentos/fulano-de-sal"); 
    java.lang.System.setProperty("user.home", "/home/rickecr"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "rickecr"); 
    java.lang.System.setProperty("user.timezone", "America/Fortaleza"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(HandlerException_ESTest_scaffolding.class.getClassLoader() ,
      "br.com.marmitaria.rest.exception.usuario.UsuarioInvalidoException",
      "org.springframework.util.NumberUtils",
      "org.springframework.web.context.request.WebRequest",
      "br.com.marmitaria.rest.exception.CustomError",
      "org.springframework.http.CacheControl",
      "org.springframework.web.context.request.NativeWebRequest",
      "org.springframework.web.context.request.ServletWebRequest",
      "org.hsqldb.jdbc.JDBCDriver",
      "org.postgresql.util.SharedTimer",
      "org.apache.el.ValueExpressionLiteral",
      "org.apache.coyote.ProtocolException",
      "org.apache.coyote.http2.ConnectionException",
      "org.hsqldb.jdbc.JDBCDriver$1",
      "org.springframework.web.util.WebUtils",
      "org.apache.tomcat.util.net.SocketEvent",
      "org.apache.coyote.http2.ConnectionSettingsLocal",
      "org.springframework.util.function.SingletonSupplier",
      "org.apache.el.ExpressionFactoryImpl",
      "org.apache.coyote.CloseNowException",
      "org.springframework.util.CollectionUtils",
      "br.com.marmitaria.rest.exception.HandlerException",
      "org.apache.tomcat.util.net.SSLSupport",
      "org.apache.coyote.http2.ConnectionSettingsBase",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "org.springframework.http.HttpStatus$Series",
      "org.apache.coyote.UpgradeProtocol",
      "br.com.marmitaria.rest.exception.DadosInvalidosException",
      "org.postgresql.util.PSQLException",
      "org.apache.coyote.http2.AbstractStream",
      "org.postgresql.util.ExpressionProperties",
      "org.apache.coyote.http2.Http2UpgradeHandler$PingManager",
      "org.postgresql.util.WriterHandler",
      "org.apache.coyote.Processor",
      "org.apache.coyote.http2.Http2AsyncParser",
      "org.springframework.stereotype.Indexed",
      "org.apache.coyote.http2.Setting",
      "org.apache.coyote.Request",
      "org.springframework.web.bind.annotation.ControllerAdvice",
      "org.springframework.util.ObjectUtils",
      "org.springframework.http.HttpMethod",
      "org.springframework.util.MultiValueMap",
      "org.springframework.util.CollectionUtils$MultiValueMapAdapter",
      "org.springframework.util.LinkedCaseInsensitiveMap$1",
      "org.springframework.http.HttpStatus",
      "org.apache.coyote.http2.Stream",
      "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager",
      "org.springframework.web.context.request.FacesRequestAttributes",
      "org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState",
      "org.springframework.util.LinkedMultiValueMap",
      "org.apache.coyote.http2.StreamProcessor",
      "org.postgresql.Driver",
      "org.apache.juli.logging.LogConfigurationException",
      "org.apache.tomcat.util.res.StringManager$1",
      "org.apache.coyote.AbstractProcessor",
      "org.springframework.http.HttpRequest",
      "org.apache.juli.logging.LogFactory",
      "org.apache.coyote.http2.StreamException",
      "org.apache.coyote.http2.Http2Parser",
      "org.apache.coyote.http2.Http2Protocol",
      "org.apache.coyote.http2.Http2Exception",
      "org.springframework.util.MimeType",
      "org.apache.tomcat.util.net.SendfileState",
      "org.springframework.web.context.request.RequestAttributes",
      "org.apache.coyote.http2.Http2UpgradeHandler$HeaderFrameBuffers",
      "org.springframework.http.HttpMessage",
      "org.springframework.http.HttpHeaders",
      "org.springframework.http.MediaType",
      "org.apache.coyote.http2.Http2Parser$Input",
      "org.apache.el.stream.StreamELResolverImpl",
      "org.h2.Driver",
      "org.apache.coyote.http2.Http2UpgradeHandler",
      "org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler",
      "org.apache.coyote.ActionHook",
      "org.springframework.http.HttpEntity",
      "org.apache.coyote.http2.HpackEncoder",
      "org.apache.coyote.http2.ConnectionSettingsRemote",
      "org.springframework.http.ResponseEntity$HeadersBuilder",
      "br.com.marmitaria.rest.exception.TokenException",
      "org.springframework.web.context.request.FacesWebRequest",
      "org.postgresql.util.HostSpec",
      "org.springframework.web.context.request.AbstractRequestAttributes",
      "org.springframework.http.ResponseEntity$BodyBuilder",
      "org.springframework.http.ReadOnlyHttpHeaders",
      "org.apache.juli.logging.Log",
      "org.apache.coyote.http2.Http2AsyncUpgradeHandler",
      "br.com.marmitaria.rest.exception.notFound.NotFoundException",
      "org.springframework.http.ContentDisposition",
      "org.apache.juli.logging.DirectJDKLog",
      "org.apache.tomcat.util.http.MimeHeaders",
      "org.apache.coyote.http2.HpackDecoder",
      "org.apache.coyote.http2.HpackDecoder$HeaderEmitter",
      "org.apache.tomcat.util.res.StringManager",
      "org.apache.coyote.AbstractProcessorLight",
      "org.apache.tomcat.util.net.SocketWrapperBase",
      "org.apache.coyote.http2.HeaderSink",
      "org.apache.coyote.http2.FrameType",
      "org.h2.JdbcDriverBackwardsCompat",
      "org.apache.coyote.http2.Http2Parser$Output",
      "org.apache.coyote.http2.SendfileData",
      "org.springframework.web.context.request.ServletRequestAttributes",
      "org.springframework.data.util.Lazy",
      "org.springframework.stereotype.Component",
      "org.springframework.http.ResponseEntity",
      "org.springframework.util.Assert",
      "org.springframework.util.StringUtils"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.servlet.http.HttpServletRequest", false, HandlerException_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletResponse", false, HandlerException_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(HandlerException_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "br.com.marmitaria.rest.exception.HandlerException",
      "org.springframework.http.HttpStatus",
      "br.com.marmitaria.rest.exception.DadosInvalidosException",
      "org.springframework.web.context.request.AbstractRequestAttributes",
      "org.springframework.util.NumberUtils",
      "org.springframework.web.context.request.ServletRequestAttributes",
      "org.springframework.web.context.request.ServletWebRequest",
      "org.springframework.util.Assert",
      "br.com.marmitaria.rest.exception.CustomError",
      "org.springframework.http.ReadOnlyHttpHeaders",
      "org.springframework.util.LinkedMultiValueMap",
      "org.springframework.http.HttpHeaders",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "org.springframework.util.LinkedCaseInsensitiveMap$1",
      "org.springframework.util.CollectionUtils",
      "org.springframework.util.CollectionUtils$MultiValueMapAdapter",
      "org.springframework.http.HttpEntity",
      "org.springframework.http.ResponseEntity",
      "br.com.marmitaria.rest.exception.usuario.UsuarioInvalidoException",
      "br.com.marmitaria.rest.exception.TokenException",
      "org.postgresql.util.SharedTimer",
      "org.postgresql.Driver",
      "org.h2.Driver",
      "org.hsqldb.jdbc.JDBCDriver",
      "br.com.marmitaria.rest.exception.notFound.NotFoundException",
      "org.springframework.web.context.request.FacesRequestAttributes",
      "org.springframework.web.context.request.FacesWebRequest",
      "org.springframework.http.HttpMethod",
      "org.springframework.web.util.WebUtils",
      "org.springframework.util.StringUtils",
      "org.apache.el.ExpressionFactoryImpl",
      "org.apache.el.stream.StreamELResolverImpl",
      "org.springframework.util.ObjectUtils",
      "org.springframework.util.function.SingletonSupplier",
      "org.springframework.data.util.Lazy",
      "org.apache.juli.logging.LogFactory",
      "org.apache.juli.logging.DirectJDKLog",
      "org.apache.tomcat.util.res.StringManager",
      "org.apache.tomcat.util.res.StringManager$1",
      "org.apache.coyote.http2.AbstractStream",
      "org.apache.coyote.http2.HeaderSink",
      "org.apache.coyote.http2.Http2UpgradeHandler",
      "org.apache.coyote.http2.Http2AsyncUpgradeHandler"
    );
  }
}
