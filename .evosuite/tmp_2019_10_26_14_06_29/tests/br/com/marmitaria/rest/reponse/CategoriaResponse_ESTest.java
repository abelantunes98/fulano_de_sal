/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 18:02:32 GMT 2019
 */

package br.com.marmitaria.rest.reponse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.model.Categoria;
import br.com.marmitaria.rest.reponse.CategoriaResponse;
import br.com.marmitaria.rest.reponse.ProdutoResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoriaResponse_ESTest extends CategoriaResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, (List<ProdutoResponse>) null);
      List<ProdutoResponse> list0 = categoriaResponse0.getProdutos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      ProdutoResponse produtoResponse0 = new ProdutoResponse();
      arrayList0.add(produtoResponse0);
      List<ProdutoResponse> list0 = categoriaResponse0.getProdutos();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      categoriaResponse0.setNome("-A'AaVc8}]w@'>Z?8%");
      String string0 = categoriaResponse0.getNome();
      assertEquals("-A'AaVc8}]w@'>Z?8%", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Categoria categoria0 = new Categoria("");
      Vector<ProdutoResponse> vector0 = new Vector<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, vector0);
      String string0 = categoriaResponse0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Categoria categoria0 = new Categoria("]v'GwT4pHaWLM=");
      Vector<ProdutoResponse> vector0 = new Vector<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, vector0);
      Long long0 = Long.getLong("{}y= YBrV", 1L);
      categoriaResponse0.setIdCategoria(long0);
      Long long1 = categoriaResponse0.getIdCategoria();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      Long long0 = new Long(0L);
      categoriaResponse0.setIdCategoria(long0);
      Long long1 = categoriaResponse0.getIdCategoria();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      Stack<ProdutoResponse> stack0 = new Stack<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, stack0);
      Long long0 = new Long((-745L));
      categoriaResponse0.setIdCategoria(long0);
      Long long1 = categoriaResponse0.getIdCategoria();
      assertEquals((-745L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, (List<ProdutoResponse>) null);
      Long long0 = new Long((-1L));
      categoriaResponse0.setIdCategoria(long0);
      Long long1 = categoriaResponse0.getIdCategoria();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<ProdutoResponse> stack0 = new Stack<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = null;
      try {
        categoriaResponse0 = new CategoriaResponse((Categoria) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.reponse.CategoriaResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      String string0 = categoriaResponse0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      Long long0 = categoriaResponse0.getIdCategoria();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      Vector<ProdutoResponse> vector0 = new Vector<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, vector0);
      categoriaResponse0.setProdutos(vector0);
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Categoria categoria0 = new Categoria();
      ArrayList<ProdutoResponse> arrayList0 = new ArrayList<ProdutoResponse>();
      CategoriaResponse categoriaResponse0 = new CategoriaResponse(categoria0, arrayList0);
      List<ProdutoResponse> list0 = categoriaResponse0.getProdutos();
      assertTrue(list0.isEmpty());
  }
}
