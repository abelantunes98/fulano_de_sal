/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:58:24 GMT 2019
 */

package br.com.marmitaria.rest.reponse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.model.TipoUsuario;
import br.com.marmitaria.persistence.model.Usuario;
import br.com.marmitaria.rest.reponse.UsuarioResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsuarioResponse_ESTest extends UsuarioResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, (String) null);
      String string0 = usuarioResponse0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "hC");
      String string0 = usuarioResponse0.getToken();
      assertEquals("hC", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setSenha("C,y^m");
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "C,y^m");
      String string0 = usuarioResponse0.getSenha();
      assertEquals("C,y^m", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      usuarioResponse0.setSenha("");
      String string0 = usuarioResponse0.getSenha();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "iW]BNn&=IE1HXJdm");
      usuarioResponse0.setNome("");
      String string0 = usuarioResponse0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("o?/Z.~//9h");
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getEmail();
      assertEquals("o?/Z.~//9h", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("");
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsuarioResponse usuarioResponse0 = null;
      try {
        usuarioResponse0 = new UsuarioResponse((Usuario) null, "br.com.marmitaria.rest.reponse.UsuarioResponse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.reponse.UsuarioResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      TipoUsuario tipoUsuario0 = TipoUsuario.ADMINISTRADOR;
      usuarioResponse0.setTipo(tipoUsuario0);
      TipoUsuario tipoUsuario1 = usuarioResponse0.getTipo();
      assertSame(tipoUsuario1, tipoUsuario0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      usuarioResponse0.setEmail("");
      assertNull(usuarioResponse0.getSenha());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "C,y^m");
      usuarioResponse0.setToken("C,y^m");
      assertEquals("C,y^m", usuarioResponse0.getToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      usuarioResponse0.setNome("6");
      String string0 = usuarioResponse0.getNome();
      assertEquals("6", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      usuarioResponse0.getTipo();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      UsuarioResponse usuarioResponse0 = new UsuarioResponse(usuario0, "");
      String string0 = usuarioResponse0.getSenha();
      assertNull(string0);
  }
}
