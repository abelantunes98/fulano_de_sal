/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:51:13 GMT 2019
 */

package br.com.marmitaria.rest.request;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.marmitaria.rest.request.MarmitaRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MarmitaRequest_ESTest extends MarmitaRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setValor((-7325.78F));
      float float0 = marmitaRequest0.getValor();
      assertEquals((-7325.78F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setTipo("kT!I>b{Z^Z");
      String string0 = marmitaRequest0.getTipo();
      assertEquals("kT!I>b{Z^Z", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      Long long0 = new Long(0L);
      marmitaRequest0.setId(long0);
      Long long1 = marmitaRequest0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      Long long0 = new Long((-2178L));
      marmitaRequest0.setId(long0);
      Long long1 = marmitaRequest0.getId();
      assertEquals((-2178L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      Long long0 = new Long(2989L);
      marmitaRequest0.setId(long0);
      Long long1 = marmitaRequest0.getId();
      assertEquals(2989L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setDescricao("18446744073709549883");
      String string0 = marmitaRequest0.getDescricao();
      assertEquals("18446744073709549883", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setDescricao("");
      String string0 = marmitaRequest0.getDescricao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setCarnes(630);
      int int0 = marmitaRequest0.getCarnes();
      assertEquals(630, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setCarnes((-1));
      int int0 = marmitaRequest0.getCarnes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      String string0 = marmitaRequest0.getTipo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      float float0 = marmitaRequest0.getValor();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      String string0 = marmitaRequest0.getDescricao();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      int int0 = marmitaRequest0.getCarnes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      Long long0 = marmitaRequest0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setValor(66.0F);
      float float0 = marmitaRequest0.getValor();
      assertEquals(66.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MarmitaRequest marmitaRequest0 = new MarmitaRequest();
      marmitaRequest0.setTipo("");
      String string0 = marmitaRequest0.getTipo();
      assertEquals("", string0);
  }
}
