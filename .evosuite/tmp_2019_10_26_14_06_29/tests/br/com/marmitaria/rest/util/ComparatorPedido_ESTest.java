/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 17:42:31 GMT 2019
 */

package br.com.marmitaria.rest.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.marmitaria.persistence.model.Pedido;
import br.com.marmitaria.rest.util.ComparatorPedido;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparatorPedido_ESTest extends ComparatorPedido_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComparatorPedido comparatorPedido0 = new ComparatorPedido();
      Pedido pedido0 = new Pedido();
      Long long0 = new Long(0L);
      pedido0.setIdPedido(long0);
      Boolean boolean0 = new Boolean(true);
      pedido0.setConfirmado(boolean0);
      int int0 = comparatorPedido0.compare(pedido0, pedido0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComparatorPedido comparatorPedido0 = new ComparatorPedido();
      Pedido pedido0 = new Pedido();
      Long long0 = new Long(1389L);
      pedido0.setIdPedido(long0);
      Boolean boolean0 = new Boolean(false);
      pedido0.setConfirmado(boolean0);
      Pedido pedido1 = new Pedido();
      pedido1.setConfirmado(boolean0);
      // Undeclared exception!
      try { 
        comparatorPedido0.compare(pedido1, pedido0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.marmitaria.rest.util.ComparatorPedido", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComparatorPedido comparatorPedido0 = new ComparatorPedido();
      Pedido pedido0 = new Pedido();
      Long long0 = new Long(1389L);
      pedido0.setIdPedido(long0);
      Boolean boolean0 = new Boolean(true);
      pedido0.setConfirmado(boolean0);
      int int0 = comparatorPedido0.compare(pedido0, pedido0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Pedido pedido0 = new Pedido();
      Boolean boolean0 = new Boolean(true);
      pedido0.setConfirmado(boolean0);
      Pedido pedido1 = new Pedido();
      Boolean boolean1 = Boolean.valueOf(false);
      pedido1.setConfirmado(boolean1);
      ComparatorPedido comparatorPedido0 = new ComparatorPedido();
      int int0 = comparatorPedido0.compare(pedido1, pedido0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ComparatorPedido comparatorPedido0 = new ComparatorPedido();
      Pedido pedido0 = new Pedido();
      Boolean boolean0 = new Boolean(true);
      pedido0.setConfirmado(boolean0);
      Pedido pedido1 = new Pedido();
      Boolean boolean1 = Boolean.valueOf(false);
      pedido1.setConfirmado(boolean1);
      int int0 = comparatorPedido0.compare(pedido0, pedido1);
      assertEquals(1, int0);
  }
}
